% Mask R-CNN Test Script
% Tests network training and inference on a single image to confirm changes
% to basic functions

%% Environment Setup
clear
clc
close all

%% Load Test Data
testDatastore = fileDatastore("./SingleDS/", ReadFcn=@(x)MATReader1C(x, 0));
testData = preview(testDatastore)

%% Network Configuration
classNames = ["CellA"];
inputSize = [528 704 1];

% Anchor boxes for different cell sizes
anchorBoxes = [21 21; 21 32; 32 21;...
               32 32; 47 32; 32 47;...
               47 47; 71 47; 47 71;...
               71 71; 107 71; 71 107;...
               107 107; 160 107; 107 160; ...
               160 160];

% Create Mask R-CNN with EfficientNetV2 backbone
testNet = MRCNN(classNames, anchorBoxes, InputSize=inputSize, ...
                ScaleFactor=[1 1]/16, ModelName='ResNet50')

%% Training Options
trainingOpts = trainingOptions("adam", ...
    InitialLearnRate=0.00001, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=300, ...
    LearnRateDropFactor=0.1, ...
    Plot="none", ...
    MaxEpochs=320, ...
    MiniBatchSize=2, ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment="cpu", ...
    VerboseFrequency=1, ...
    L2Regularization=1e-4, ...
    GradientThreshold=1, ...
    BatchNormalizationStatistics="moving")

%% Train Network
[trainedNet, trainingInfo] = trainMRCNN(testDatastore, testNet, trainingOpts, ...
    NumStrongestRegions=150, ...
    NumRegionsToSample=150, ...
    PositiveOverlapRange=[0.5 1], ...
    NegativeOverlapRange=[0 0.5], ...
    ForcedPositiveProposals=false)

%% Load Test Image
load("A172_Phase_A7_1_00d00h00m_2.mat", "im")

testImage = rescale(im);
testImage = repmat(testImage, [1 1 1]);
[testImage, ~] = resizeImageandMask(testImage, [], [528, 704]);

%% Run Inference
tic
[detectedMasks, detectedLabels, confidenceScores, boundingBoxes] = ...
    segmentObjects(trainedNet, testImage, ...
        Threshold=0.5, ...
        NumStrongestRegions=1000, ...
        SelectStrongest=true, ...
        MinSize=[1 1], ...
        MaxSize=[80 80]);
toc

% Visualize Results
if(isempty(detectedMasks))
    resultImage = testImage(:,:,1);
else
    resultImage = insertObjectMask(testImage(:,:,1), detectedMasks, ...
                                  Color=lines(size(detectedMasks, 3)));
end

figure, imshow(resultImage)

% Optional: Show bounding boxes with confidence scores
%showShape("rectangle", gather(boundingBoxes), "Label", confidenceScores, "LineColor",'r')


%% Test Function with Pre-Processing

segmentCells(trainedNet, testImage, "ShowMasks", 1)