% Mask R-CNN Training Script for Cell Detection
% Three-phase training approach: warmup, RPN focus, full training

%% Environment Setup
clear
clc
close all
addpath(genpath("~/Scratch/MRCNNsrc")) % Custom CNN and training loop functions

%% Network Configuration
miniBatchsize = 2;
trainClassNames = ["CellA"];
imageSizeTrain = [528 704 1];

% Anchor box sizes for different object scales
ABs = [14 14; 14 21; 21 14;...
       21 21; 21 32; 32 21;...
       32 32; 47 32; 32 47;...
       47 47; 71 47; 47 71;...
       71 71; 107 71; 71 107;...
       107 107; 160 107; 107 160; ...
       160 160];

% Create Mask R-CNN with EfficientNet backbone
net = CascadeRCNN(trainClassNames,ABs,InputSize=imageSizeTrain,...
    ScaleFactor=[1 1]/16,ModelName='CEfficientNet')

% Setup data
ds = fileDatastore("~/Scratch/AllDSFs/DSFs", ReadFcn=@(x)MATReader1C(x, 0)); % Training data
valds = fileDatastore("~/Scratch/AllDSFs/TestDSFs", ReadFcn=@(x)MATReader1C(x, 0)); % Validation data
preview(ds)

%% Execution Environment Setup
if canUseGPU
    executionEnvironment = "gpu";
    gpuDevice(1)
else
    executionEnvironment = "cpu";
end
clear ans

%% Phase 1: Warmup Training (Initialize all layers)
% Low learning rate to gently initialize all network weights
options = trainingOptions("adam", ...
    InitialLearnRate=1e-5, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=100, ...
    LearnRateDropFactor=1, ...
    Plot="none", ...
    MaxEpochs=3, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch")

[net,info1] = trainMRCNN(ds, net, options, ...
    NumStrongestRegions=1000, ...
    NumRegionsToSample=128, ...
    PositiveOverlapRange=[0.5 1], ...
    NegativeOverlapRange=[0 0.5], ...
    ForcedPositiveProposals=false)
save("CascadeEff-Warmup.mat");

% %% Phase 2: RPN Focus Training (Freeze backbone, train RPN)
% % Higher learning rate, focus on Region Proposal Network
% options = trainingOptions("adam", ...
%     InitialLearnRate=1e-4, ...
%     LearnRateSchedule="piecewise", ...
%     LearnRateDropPeriod=100, ...
%     LearnRateDropFactor=1, ...
%     Plot="none", ...
%     MaxEpochs=2, ...
%     MiniBatchSize=miniBatchsize, ...
%     BatchNormalizationStatistics="moving", ...
%     ResetInputNormalization=false, ...
%     ExecutionEnvironment=executionEnvironment, ...
%     CheckpointPath="~/Scratch/Checkpoints", ...
%     CheckpointFrequency=10, ...
%     CheckpointFrequencyUnit="epoch", ...
%     VerboseFrequency=1, ...
%     Shuffle="every-epoch")
% 
% [net,info2] = trainMRCNN(ds, net, options, "FreezeSubNetwork", "backbone", ...
%     NumStrongestRegions=1000, ...
%     NumRegionsToSample=128, ...
%     PositiveOverlapRange=[0.5 1], ...
%     NegativeOverlapRange=[0 0.5], ...
%     ForcedPositiveProposals=false)
% save("Eff2-RPNFOCUS.mat");

%% Phase 3: Full Training (Train entire network)
% Comprehensive training with validation, regularization, and learning rate decay
options = trainingOptions("adam", ...
    InitialLearnRate=1e-4, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=5, ...
    LearnRateDropFactor=0.05^(1/5), ...
    Plot="none", ...
    MaxEpochs=25, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=1, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch", ...
    L2Regularization=1e-4, ...
    GradientThreshold=1,...
    ValidationData=valds, ...
    ValidationFrequency=ceil(1*3188/miniBatchsize), ...
    ValidationPatience=16)

% Final training phase
[net,info3] = trainMRCNN(ds, net, options, ...
    NumStrongestRegions=1000, ...
    NumRegionsToSample=128, ...
    PositiveOverlapRange=[0.5 1], ...
    NegativeOverlapRange=[0 0.5], ...
    ForcedPositiveProposals=false)
save("CascadeEff.mat");