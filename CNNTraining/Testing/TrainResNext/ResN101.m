clear
clc
close all
addpath("~/Scratch/MRCNNsrc") %for custom cnn and training loops

%%
miniBatchsize=4;

trainClassNames = ["CellA"];
imageSizeTrain = [528 704 1];

ABs = [20 20; 20 40; 40 20]*2;
ABs = [ABs*2; ABs*4; ABs*8; 320 320]/2;
NetDataDir = "~/Scratch/NetData/NetDataResNext101"
 
net = MRCNN(trainClassNames,ABs, NetDataDir,InputSize=imageSizeTrain, ScaleFactor=[1 1]/16)


ds = fileDatastore("~/Scratch/AllDSFs/DSFs", ReadFcn=@(x)MATReader1C(x, 1)); %training data
valds = fileDatastore("~/Scratch/AllDSFs/ValDSFs", ReadFcn=@(x)MATReader1C(x, 0)); %validation data

preview(ds)


%%
if canUseGPU
    executionEnvironment = "gpu";
    gpuDevice(1)
else
    executionEnvironment = "cpu";
end
clear ans

%% phase 1, initializing RPN and Detection
options = trainingOptions("adam", ...
    InitialLearnRate=5e-5, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=100, ...
    LearnRateDropFactor=1, ...
    Plot="none", ...  
    MaxEpochs=5, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch", ...
    GradientThreshold=1 )

[net,info1] = trainMRCNN(ds,net,options, NumStrongestRegions=1200, NumRegionsToSample=128, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("ResN101-Warmup1.mat");
%% phase 2, initializing all layers
options = trainingOptions("adam", ...
    InitialLearnRate=5e-5, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=100, ...
    LearnRateDropFactor=1, ...
    Plot="none", ...  
    MaxEpochs=5, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch", ...
    GradientThreshold=1 )

[net,info1] = trainMRCNN(ds,net,options, NumStrongestRegions=1200, NumRegionsToSample=128, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("ResN101-Warmup2.mat");

%% phase 3, train everything
options = trainingOptions("adam", ...
    InitialLearnRate=1e-3, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=27, ...
    LearnRateDropFactor=0.15, ...
    Plot="none", ...  
    MaxEpochs=80, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch", ...
    ValidationData=valds, ...
    ValidationFrequency=ceil(3188/miniBatchsize), ...
    GradientThreshold=1, ...
    ValidationPatience=6)

[net,info3] = trainMRCNN(ds,net,options, NumStrongestRegions=1200, NumRegionsToSample=128, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("ResN101-FINAL.mat");