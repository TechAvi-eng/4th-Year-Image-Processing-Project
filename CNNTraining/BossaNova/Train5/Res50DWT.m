clear
clc
close all
addpath("~/Scratch/MRCNNsrc") %for custom cnn and training loops

%%
miniBatchsize=3;


trainClassNames = ["CellA"];
imageSizeTrain = [528/2 704/2 4];

ABs = [20 20; 20 40; 40 20]*2;
ABs = [ABs*2; ABs*4; ABs*8; 320 320]/2;
NetDataDir = "~/Scratch/NetData/NetDataRes50"
 
net = MRCNN(trainClassNames,ABs, NetDataDir,InputSize=imageSizeTrain, ScaleFactor=[1 1]/16)


ds = fileDatastore("~/Scratch/AllDSFs/DSFs", ReadFcn=@(x)MATReaderDWT(x, 1)); %training data
valds = fileDatastore("~/Scratch/AllDSFs/ValDSFs", ReadFcn=@(x)MATReaderDWT(x, 0)); %validation data

preview(ds)


%%
if canUseGPU
    executionEnvironment = "gpu";
    gpuDevice(1)
else
    executionEnvironment = "cpu";
end
clear ans

%% phase 1, initializing all layers
options = trainingOptions("adam", ...
    InitialLearnRate=5e-5, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=100, ...
    LearnRateDropFactor=1, ...
    Plot="none", ...  
    MaxEpochs=2, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch")

[net,info1] = trainMRCNN(ds,net,options, NumStrongestRegions=5000, NumRegionsToSample=200, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("Res50-Warmup.mat");

if canUseGPU
    executionEnvironment = "gpu";
    gpuDevice(1)
else
    executionEnvironment = "cpu";
end
%% phase 2, focus on region proposal network
options = trainingOptions("adam", ...
    InitialLearnRate=1e-4, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=100, ...
    LearnRateDropFactor=1, ...
    Plot="none", ...  
    MaxEpochs=5, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch")

[net,info2] = trainMRCNN(ds,net,options,"FreezeSubNetwork","backbone", NumStrongestRegions=5000, NumRegionsToSample=200, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("Res50-RPNFOCUS.mat");

if canUseGPU
    executionEnvironment = "gpu";
    gpuDevice(1)
else
    executionEnvironment = "cpu";
end
%% phase 3, train everything
options = trainingOptions("adam", ...
    InitialLearnRate=1e-3, ...
    LearnRateSchedule="piecewise", ...
    LearnRateDropPeriod=11, ...
    LearnRateDropFactor=0.175, ...
    Plot="none", ...  
    MaxEpochs=33, ...
    MiniBatchSize=miniBatchsize, ...
    BatchNormalizationStatistics="moving", ...
    ResetInputNormalization=false, ...
    ExecutionEnvironment=executionEnvironment, ...
    CheckpointPath="~/Scratch/Checkpoints", ...
    CheckpointFrequency=10, ...
    CheckpointFrequencyUnit="epoch", ...
    VerboseFrequency=1, ...
    Shuffle="every-epoch", ...
    ValidationData=valds, ...
    ValidationFrequency=3188/miniBatchsize*10)

[net,info3] = trainMRCNN(ds,net,options, NumStrongestRegions=5000, NumRegionsToSample=200, PositiveOverlapRange=[0.7 1], NegativeOverlapRange=[0 0.3], ForcedPositiveProposals=true)
save("Res50-FINAL.mat");
