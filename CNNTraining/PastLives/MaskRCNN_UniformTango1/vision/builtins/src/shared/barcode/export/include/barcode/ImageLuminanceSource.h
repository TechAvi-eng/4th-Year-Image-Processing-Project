////////////////////////////////////////////////////////////////////////////////
// Implements a custom class that inherits from the abstract 'LuminanceSource'
// class for storing the image data passed in from MATLAB. Construction performs
// a shallow copy of the image data and expects the image to be row-major.
//
// The class provides methods to access a row, or a matrix from the image
// and utility functions to rotate and crop the image.
//
// Copyright 2019-2024 The MathWorks, Inc.
////////////////////////////////////////////////////////////////////////////////
#ifdef COMPILE_FOR_VISION_BUILTINS
#include "ZXing/LuminanceSource.h"
#else
#include "LuminanceSource.h"
#endif


class ImageLuminanceSource : public ZXing::LuminanceSource
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor for working with the entire image
    ////////////////////////////////////////////////////////////////////////////////
    ImageLuminanceSource(const uint8_t * imgData, const size_t width, const size_t height) :
                    ImageLuminanceSource(0, 0, width, height, imgData, width){};

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor for working with a ROI
    ////////////////////////////////////////////////////////////////////////////////
    ImageLuminanceSource(const size_t left, const size_t top, const size_t width, const size_t height, const uint8_t* pixels, const size_t rowBytes) :
      _pixels(pixels),
      _left(left),
      _top(top),
      _width(width),
      _height(height),
      _rowBytes(rowBytes){};

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor for copying image data as a shared_ptr to ByteArray for rotations
    ////////////////////////////////////////////////////////////////////////////////
    ImageLuminanceSource(std::shared_ptr<const ZXing::ByteArray> pixelsArray, const size_t width, const size_t height);

    ////////////////////////////////////////////////////////////////////////////////
    // Getter for _width of image
    ////////////////////////////////////////////////////////////////////////////////
    virtual int width() const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Getter for _height of image
    ////////////////////////////////////////////////////////////////////////////////
    virtual int height() const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Access row in image (pointer to the first element)
    ////////////////////////////////////////////////////////////////////////////////
    virtual const uint8_t* getRow(int y, ZXing::ByteArray& buffer, bool forceCopy = false) const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Access matrix (contiguous rows in image)
    ////////////////////////////////////////////////////////////////////////////////
    virtual const uint8_t* getMatrix(ZXing::ByteArray& buffer, int& outRowBytes, bool forceCopy = false) const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Return true if the class provides crop support
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool canCrop() const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Access ROI in image
    ////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<ZXing::LuminanceSource> cropped(int left, int top, int width, int height) const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Return true if class supports rotation
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool canRotate() const override;

    ////////////////////////////////////////////////////////////////////////////////
    // Access rotated image (supports only predefined rotations)
    ////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<ZXing::LuminanceSource> rotated(int degreeCW) const override;

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Rotate image by 90 degrees
    ////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<ZXing::ByteArray> rotate90() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Rotate image by 180 degrees
    ////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<ZXing::ByteArray> rotate180() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Rotate image by 270 degrees
    ////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<ZXing::ByteArray> rotate270() const;

    const uint8_t * _pixels;
    std::shared_ptr<const ZXing::ByteArray> _pixelsArray;
    size_t _left;
    size_t _top;
    size_t _width;
    size_t _height;
    size_t _rowBytes;
};
