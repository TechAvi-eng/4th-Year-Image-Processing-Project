classdef opticalFlowHSBuildable < coder.ExternalDependency %#codegen
    % opticalFlowHSBuildable - encapsulate opticalFlowHS implementation library
    
    % Copyright 2012-2020 The MathWorks, Inc.
    
    
    methods (Static)
        
        function name = getDescriptiveName(~)
            name = 'opticalFlowHSBuildable';
        end
        
        function b = isSupportedContext(~)
            b = true; % supports non-host target
        end
        
        function updateBuildInfo(buildInfo, ~)
            buildInfo.addIncludePaths({fullfile(matlabroot,'toolbox', ...
                'vision','builtins','src','vision','include')} );
            srcPaths = fullfile(matlabroot,'toolbox', ...
                'vision','builtins','src','vision');
            buildInfo.addSourceFiles({'opticalFlowHSCore.cpp'},srcPaths);
            buildInfo.addSourcePaths(srcPaths, 'CVT_GROUP');
            buildInfo.addIncludeFiles({'vision_defines.h', ...
                'opticalFlowHSCore_api.hpp', ...
                'opticalFlowHS.hpp', ...
                'opticalFlowHS_Sobel.hpp'});
        end
        
        %------------------------------------------------------------------
        % write all supported data-type specific function calls
        function [outVelReal, outVelImag] = ...
                opticalFlowHS_compute( ...
                tmpImageA, ImageB, ...
                pBuffCprev, pBuffCnext, pBuffRprev, pBuffRnext, ...
                pGradCC, pGradRC, pGradRR, pGradCT, pGradRT, ...
                pAlpha, ...
                pVelBufCcurr, pVelBufCprev, pVelBufRcurr, pVelBufRprev, ...
                Smoothness, ... % Smoothness is Lambda
                useMaxIter, useMaxAllowableAbsDiffVel, ...
                MaxIter, MaxAllowableAbsDiffVel ...
                )
            
            % add '#include "opticalFlowHSCore_api.hpp"' in <myfcn>.c
            coder.cinclude('opticalFlowHSCore_api.hpp');
            
            coder.inline('always');
            
            % call function
            outVelReal = zeros(size(tmpImageA), 'like', pBuffCprev);
            outVelImag = zeros(size(tmpImageA), 'like', pBuffCprev);
            
            pInRows = int32(size(tmpImageA,1));
            pInCols = int32(size(tmpImageA,2));
            fcnName = ['MWCV_OpticalFlow_HS_' class(tmpImageA)];
            coder.ceval(fcnName,...
                coder.ref(tmpImageA), ...
                coder.ref(ImageB), ...
                coder.ref(outVelReal), ...
                coder.ref(outVelImag), ...
                coder.ref(pBuffCprev), coder.ref(pBuffCnext), coder.ref(pBuffRprev), coder.ref(pBuffRnext), ...
                coder.ref(pGradCC), coder.ref(pGradRC), coder.ref(pGradRR), coder.ref(pGradCT), coder.ref(pGradRT), ...
                coder.ref(pAlpha), ...
                coder.ref(pVelBufCcurr), coder.ref(pVelBufCprev), coder.ref(pVelBufRcurr), coder.ref(pVelBufRprev), ...
                coder.ref(Smoothness), ... % Smoothness is Lambda
                useMaxIter, useMaxAllowableAbsDiffVel, ...
                coder.ref(MaxIter), coder.ref(MaxAllowableAbsDiffVel), ...
                pInRows, pInCols ...
                );
            
        end
    end
end
