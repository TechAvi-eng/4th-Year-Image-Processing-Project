#include <vector>
#include <string>

#ifdef BUILDING_LIBMWVSLAMCORE
    #include "vslamcore/InvertedImageIndex.hpp" 
    #include "DBoW2/DBoW2.h"
    #include "DBoW2/QueryResults.h"
#else
    #include "InvertedImageIndex.hpp" 
    #include "DBoW2.h"
    #include "QueryResults.h"
#endif

namespace vision {
    namespace vslam {
        /**
         * @brief Add features of image to index database 
         *
         * @param[in]  imageFeatures     Vector of features of an image
         * @return     Unique index generated by database of the new entry
         *
         */
        DBoW2::EntryId InvertedImageIndex::addImageFeatures(const std::vector<cv::Mat>& imageFeatures){
            return this->my_database.add(imageFeatures);
        }
        
        /**
         * @brief 
         *
         * @param[in]  imageFeatures    Vector of features of an image
         * @param[in]  maxResults       Maximum number of results to return
         * @return     Vector of query results containing entry Ids and scores
         *
         */
        DBoW2::QueryResults InvertedImageIndex::retrieveImages(const std::vector<cv::Mat>& imageFeatures, const int maxResults = 1){
            DBoW2::QueryResults retval;
            this->my_database.query(imageFeatures, retval, maxResults);
            return retval;
        }
    } // end namespace vslam
} // end namespace vision